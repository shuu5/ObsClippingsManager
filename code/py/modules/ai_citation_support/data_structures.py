"""
AI理解支援引用文献統合用データ構造 v4.0

新機能で使用するデータクラスと型定義を提供します。
"""

from dataclasses import dataclass, field
from datetime import datetime
from typing import Dict, List, Optional, Any
from pathlib import Path


@dataclass
class CitationMapping:
    """軽量引用マッピング情報"""
    references_file: str                 # references.bibファイルパス
    index_map: Dict[int, str]           # 引用番号 → citation_key
    last_updated: datetime              # 最終更新時刻
    mapping_version: str                # マッピングバージョン
    total_citations: int                # 総引用数
    
    def to_yaml_dict(self) -> Dict[str, Any]:
        """YAMLヘッダー用辞書に変換"""
        return {
            'references_file': self.references_file,
            'index_map': self.index_map,
            'last_updated': self.last_updated.isoformat(),
            'mapping_version': self.mapping_version,
            'total_citations': self.total_citations
        }
    
    @classmethod
    def from_yaml_dict(cls, data: Dict[str, Any]) -> 'CitationMapping':
        """YAML辞書からインスタンスを作成"""
        return cls(
            references_file=data['references_file'],
            index_map=data['index_map'],
            last_updated=datetime.fromisoformat(data['last_updated']),
            mapping_version=data['mapping_version'],
            total_citations=data['total_citations']
        )


@dataclass
class CitationInfo:
    """完全な引用文献情報"""
    number: int                         # 引用番号
    citation_key: str                   # BibTeX citation_key
    title: str                          # 論文タイトル
    authors: str                        # 著者情報
    year: int                           # 発行年
    journal: str                        # ジャーナル名
    volume: str                         # 巻号情報
    pages: str                          # ページ情報
    doi: str                            # DOI
    context: str = ""                   # 引用文脈
    relevance_score: float = 0.0        # 関連度スコア
    full_bibtex: str = ""               # 完全BibTeXエントリ
    
    def to_reference_line(self) -> str:
        """AI理解用Reference Table行を生成"""
        # フォーマット: [1] → **著者** (年). *タイトル*. **ジャーナル**, 巻(号), ページ. DOI: xxx
        volume_info = f"{self.volume}" if self.volume else ""
        pages_info = f", {self.pages}" if self.pages else ""
        volume_pages = f", {volume_info}{pages_info}" if volume_info or pages_info else ""
        
        doi_info = f" DOI: {self.doi}" if self.doi else ""
        
        reference_line = (
            f"[{self.number}] → **{self.authors}** ({self.year}). "
            f"*{self.title}*. **{self.journal}**{volume_pages}.{doi_info}"
        )
        
        if self.context:
            reference_line += f"\n    └─ **Context**: {self.context}"
        
        return reference_line


@dataclass
class AIReadableDocument:
    """AI理解用統合文書"""
    original_file: str                  # 元ファイル
    references_file: str                # references.bibファイル
    citation_table: str                 # Citation Reference Table
    paper_content: str                  # 論文内容
    generation_timestamp: datetime     # 生成時刻
    total_citations: int                # 総引用数
    ai_optimization_level: str = "enhanced"  # AI最適化レベル
    
    def to_markdown(self) -> str:
        """AI理解用Markdownファイルを生成"""
        timestamp_str = self.generation_timestamp.strftime("%Y-%m-%d %H:%M:%S")
        
        content = f"""# {Path(self.original_file).stem}
*Generated by ObsClippingsManager v4.0 for AI Assistant*

## 📚 Citation Reference Table
**AI Assistant Reference Guide: This table provides complete citation information for all numbered references in the paper.**

{self.citation_table}

---

## 📄 Paper Content

{self.paper_content}

---
*End of AI Assistant Document*
*Original file: {Path(self.original_file).name} | References: {Path(self.references_file).name} | Generated: {timestamp_str}*
"""
        return content


@dataclass
class MappingStatistics:
    """マッピング統計情報"""
    created_mappings: int = 0
    updated_mappings: int = 0
    failed_mappings: int = 0
    total_citations_mapped: int = 0
    processing_time: float = 0.0
    
    def __str__(self) -> str:
        return (
            f"Mapping Statistics: "
            f"Created: {self.created_mappings}, "
            f"Updated: {self.updated_mappings}, "
            f"Failed: {self.failed_mappings}, "
            f"Citations: {self.total_citations_mapped}, "
            f"Time: {self.processing_time:.2f}s"
        )


@dataclass
class AIGenerationResult:
    """AI用ファイル生成結果"""
    success: bool
    output_file: str = ""
    statistics: Optional[MappingStatistics] = None
    error_message: str = ""
    warnings: List[str] = field(default_factory=list)
    
    def __str__(self) -> str:
        if self.success:
            return f"✅ AI file generated: {self.output_file}"
        else:
            return f"❌ Generation failed: {self.error_message}" 