"""
BibTeX変換・整形

取得した引用文献をBibTeX形式に変換・整形します。
"""

import re
import logging
from datetime import datetime
from typing import Dict, List, Any, Optional
from pathlib import Path

from .exceptions import BibTeXConversionError


class ReferenceFormatter:
    """引用文献のBibTeX変換・整形"""
    
    def __init__(self, max_authors: int = 3):
        """
        Args:
            max_authors: BibTeXに含める最大著者数
        """
        self.max_authors = max_authors
        self.logger = logging.getLogger("ObsClippingsManager.CitationFetcher.ReferenceFormatter")
        
    def format_to_bibtex(self, 
                        references: List[Dict[str, Any]], 
                        source_api: str,
                        source_doi: str = None) -> str:
        """
        引用文献をBibTeX形式に変換
        
        Args:
            references: 引用文献のリスト
            source_api: データソース名（CrossRef, OpenCitations）
            source_doi: 元論文のDOI
            
        Returns:
            BibTeX形式の文字列
        """
        if not references:
            self.logger.warning("No references provided for formatting")
            return ""
        
        bibtex_entries = []
        
        # ヘッダーコメントを追加
        header = self._generate_header(source_api, source_doi, len(references))
        bibtex_entries.append(header)
        
        # 各引用文献をBibTeX形式に変換
        successful_conversions = 0
        
        for ref in references:
            try:
                bibtex_entry = self._convert_reference_to_bibtex(ref)
                if bibtex_entry:
                    bibtex_entries.append(bibtex_entry)
                    successful_conversions += 1
                    
            except Exception as e:
                self.logger.warning(f"Failed to convert reference {ref.get('index', 'unknown')}: {e}")
                continue
        
        self.logger.info(
            f"Successfully converted {successful_conversions}/{len(references)} references to BibTeX"
        )
        
        return '\n\n'.join(bibtex_entries)
    
    def generate_citation_key(self, reference: Dict[str, Any]) -> str:
        """
        引用文献のcitation keyを生成
        
        Args:
            reference: 引用文献のメタデータ
            
        Returns:
            Citation key文字列
        """
        # 著者情報から主著者を取得
        author_part = self._extract_first_author_surname(reference)
        
        # 年を取得
        year_part = self._extract_year(reference)
        
        # ジャーナル/会議名から短縮形を生成
        venue_part = self._extract_venue_abbreviation(reference)
        
        # Citation keyを組み合わせ
        citation_key_parts = [author_part, year_part, venue_part]
        citation_key_parts = [part for part in citation_key_parts if part]
        
        if not citation_key_parts:
            # フォールバック: インデックスベース
            return f"ref_{reference.get('index', 0)}"
        
        citation_key = ''.join(citation_key_parts)
        
        # 無効な文字を除去
        citation_key = re.sub(r'[^a-zA-Z0-9_]', '', citation_key)
        
        return citation_key or f"ref_{reference.get('index', 0)}"
    
    def _generate_header(self, source_api: str, source_doi: str, count: int) -> str:
        """
        BibTeXファイルのヘッダーを生成
        
        Args:
            source_api: データソース名
            source_doi: 元論文のDOI
            count: 引用文献数
            
        Returns:
            ヘッダーコメント
        """
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        header_lines = [
            f"% Generated by CitationFetcher using {source_api} API",
            f"% Generated on: {timestamp}",
            f"% Total references found: {count}"
        ]
        
        if source_doi:
            header_lines.insert(-1, f"% Source DOI: {source_doi}")
        
        return '\n'.join(header_lines)
    
    def _convert_reference_to_bibtex(self, reference: Dict[str, Any]) -> str:
        """
        単一の引用文献をBibTeX形式に変換
        
        Args:
            reference: 引用文献のメタデータ
            
        Returns:
            BibTeX形式の文字列
        """
        # Citation keyを生成
        citation_key = self.generate_citation_key(reference)
        
        # エントリタイプを決定
        entry_type = self._determine_entry_type(reference)
        
        # フィールドを構築
        fields = self._build_bibtex_fields(reference)
        
        if not fields:
            raise BibTeXConversionError("No valid fields found for reference", reference)
        
        # BibTeXエントリを組み立て
        bibtex_lines = [f"@{entry_type}{{{citation_key},"]
        
        for field_name, field_value in fields.items():
            escaped_value = self._escape_bibtex_value(field_value)
            bibtex_lines.append(f"  {field_name} = {{{escaped_value}}},")
        
        # 最後のカンマを除去し、閉じ括弧を追加
        if bibtex_lines[-1].endswith(','):
            bibtex_lines[-1] = bibtex_lines[-1][:-1]
        
        bibtex_lines.append("}")
        
        return '\n'.join(bibtex_lines)
    
    def _determine_entry_type(self, reference: Dict[str, Any]) -> str:
        """
        引用文献のBibTeXエントリタイプを決定
        
        Args:
            reference: 引用文献のメタデータ
            
        Returns:
            BibTeXエントリタイプ
        """
        # ジャーナルがある場合は論文
        if reference.get('journal'):
            return 'article'
        
        # 書籍タイトルがある場合は書籍章
        if reference.get('book_title') or reference.get('volume-title'):
            return 'incollection'
        
        # 出版社がある場合は書籍
        if reference.get('publisher'):
            return 'book'
        
        # デフォルトはその他
        return 'misc'
    
    def _build_bibtex_fields(self, reference: Dict[str, Any]) -> Dict[str, str]:
        """
        BibTeXフィールドを構築
        
        Args:
            reference: 引用文献のメタデータ
            
        Returns:
            BibTeXフィールドの辞書
        """
        fields = {}
        
        # タイトル - Noneチェックを追加
        title = reference.get('title')
        if title is not None and title.strip():
            fields['title'] = title.strip()
        
        # 著者
        author = self._format_authors_for_bibtex(reference)
        if author:
            fields['author'] = author
        
        # 年
        year = reference.get('year')
        if year:
            fields['year'] = str(year)
        
        # ジャーナル - Noneチェックを追加
        journal = reference.get('journal')
        if journal is not None and journal.strip():
            fields['journal'] = journal.strip()
        
        # 巻・号・ページ
        volume = reference.get('volume')
        if volume:
            fields['volume'] = str(volume)
        
        issue = reference.get('issue')
        if issue:
            fields['number'] = str(issue)
        
        pages = reference.get('page') or reference.get('pages')
        if pages:
            fields['pages'] = str(pages)
        
        # DOI
        doi = reference.get('doi')
        if doi and str(doi).strip():
            fields['doi'] = str(doi).strip()
        
        # 出版社
        publisher = reference.get('publisher')
        if publisher and str(publisher).strip():
            fields['publisher'] = str(publisher).strip()
        
        # 書籍タイトル
        book_title = reference.get('book_title') or reference.get('volume-title')
        if book_title and str(book_title).strip():
            fields['booktitle'] = str(book_title).strip()
        
        # ISBN/ISSN
        isbn = reference.get('isbn')
        if isbn and str(isbn).strip():
            fields['isbn'] = str(isbn).strip()
        
        issn = reference.get('issn')
        if issn and str(issn).strip():
            fields['issn'] = str(issn).strip()
        
        # ソース情報をnoteに追加
        source = reference.get('source')
        if source and str(source).strip():
            note = f"Retrieved from {str(source).strip()}"
            if 'note' in fields:
                fields['note'] = f"{fields['note']}. {note}"
            else:
                fields['note'] = note
        
        return fields
    
    def _format_authors_for_bibtex(self, reference: Dict[str, Any]) -> str:
        """
        著者情報をBibTeX形式にフォーマット
        
        Args:
            reference: 引用文献のメタデータ
            
        Returns:
            BibTeX形式の著者文字列
        """
        # フォーマット済み著者があれば使用
        formatted_author = reference.get('formatted_author')
        if formatted_author:
            return self._truncate_authors(formatted_author)
        
        # 生の著者データを処理（authorフィールドを使用）
        author_data = reference.get('author')
        if not author_data:
            return ""
        
        if isinstance(author_data, str):
            return self._truncate_authors(author_data)
        elif isinstance(author_data, list):
            return self._format_author_list(author_data)
        
        return ""
    
    def _format_author_list(self, authors: List[Any]) -> str:
        """
        著者リストをフォーマット
        
        Args:
            authors: 著者のリスト
            
        Returns:
            フォーマットされた著者文字列
        """
        formatted_authors = []
        
        for author in authors[:self.max_authors]:
            if isinstance(author, dict):
                given = author.get('given', '')
                family = author.get('family', '')
                if family:
                    if given:
                        formatted_authors.append(f"{given} {family}")
                    else:
                        formatted_authors.append(family)
            elif isinstance(author, str):
                formatted_authors.append(author)
        
        author_string = ' and '.join(formatted_authors)
        
        # 著者数が制限を超える場合は"others"を追加
        if len(authors) > self.max_authors:
            author_string += " and others"
        
        return author_string
    
    def _truncate_authors(self, author_string: str) -> str:
        """
        著者文字列を最大著者数で切り詰め
        
        Args:
            author_string: 著者文字列
            
        Returns:
            切り詰められた著者文字列
        """
        # "and"で分割
        authors = re.split(r'\s+and\s+', author_string, flags=re.IGNORECASE)
        
        if len(authors) <= self.max_authors:
            return author_string
        
        truncated_authors = authors[:self.max_authors]
        return ' and '.join(truncated_authors) + " and others"
    
    def _extract_first_author_surname(self, reference: Dict[str, Any]) -> str:
        """
        第一著者の姓を抽出
        
        Args:
            reference: 引用文献のメタデータ
            
        Returns:
            第一著者の姓
        """
        author_data = reference.get('author') or reference.get('formatted_author', '')
        
        if not author_data:
            return ""
        
        # 文字列の場合
        if isinstance(author_data, str):
            # "and"で分割して最初の著者を取得
            first_author = re.split(r'\s+and\s+', author_data, flags=re.IGNORECASE)[0].strip()
            
            # 姓を抽出（簡易版）
            if ',' in first_author:
                # "Surname, Given" 形式
                surname = first_author.split(',')[0].strip()
            else:
                # "Given Surname" 形式（最後の単語を姓とする）
                parts = first_author.split()
                surname = parts[-1] if parts else first_author
            
            return re.sub(r'[^a-zA-Z]', '', surname)
        
        # リストの場合
        elif isinstance(author_data, list) and author_data:
            first_author = author_data[0]
            if isinstance(first_author, dict):
                surname = first_author.get('family', '')
                return re.sub(r'[^a-zA-Z]', '', surname)
        
        return ""
    
    def _extract_year(self, reference: Dict[str, Any]) -> str:
        """
        年を抽出
        
        Args:
            reference: 引用文献のメタデータ
            
        Returns:
            年の文字列
        """
        year = reference.get('year')
        if year:
            # 文字列から数字のみ抽出
            year_match = re.search(r'\d{4}', str(year))
            if year_match:
                return year_match.group()
        
        return ""
    
    def _extract_venue_abbreviation(self, reference: Dict[str, Any]) -> str:
        """
        会議・ジャーナル名の短縮形を生成
        
        Args:
            reference: 引用文献のメタデータ
            
        Returns:
            短縮形
        """
        # ジャーナル名から短縮形を生成
        journal = reference.get('journal', '')
        if journal:
            # 頭文字を取得（簡易版）
            words = re.findall(r'\b[A-Z][a-z]*', journal)
            if words:
                abbreviation = ''.join(word[0] for word in words[:3])  # 最大3文字
                return abbreviation
        
        return ""
    
    def _escape_bibtex_value(self, value: str) -> str:
        """
        BibTeX値の特殊文字をエスケープ
        
        Args:
            value: エスケープ対象の値
            
        Returns:
            エスケープされた値
        """
        if not isinstance(value, str):
            value = str(value)
        
        # BibTeX特殊文字のエスケープ
        escapes = {
            '{': '\\{',
            '}': '\\}',
            '%': '\\%',
            '$': '\\$',
            '&': '\\&',
            '#': '\\#',
            '^': '\\^{}',
            '_': '\\_',
            '~': '\\~{}',
            '\\': '\\textbackslash{}'
        }
        
        for char, escaped in escapes.items():
            value = value.replace(char, escaped)
        
        return value


# 便利関数
def convert_reference_to_bibtex(reference: Dict[str, Any], max_authors: int = 3) -> str:
    """
    単一の引用文献をBibTeX形式に変換（簡易版）
    
    Args:
        reference: 引用文献のメタデータ
        max_authors: 最大著者数
        
    Returns:
        BibTeX形式の文字列
    """
    formatter = ReferenceFormatter(max_authors=max_authors)
    return formatter._convert_reference_to_bibtex(reference)


def normalize_author_names(authors: List[Dict[str, str]]) -> str:
    """
    著者名リストをBibTeX形式に正規化（簡易版）
    
    Args:
        authors: 著者情報のリスト
        
    Returns:
        BibTeX形式の著者文字列
    """
    formatter = ReferenceFormatter()
    return formatter._format_author_list(authors)


def generate_bibtex_entry_id(title: str, authors: List[str], year: str) -> str:
    """
    BibTeXエントリIDを生成（簡易版）
    
    Args:
        title: タイトル
        authors: 著者リスト
        year: 年
        
    Returns:
        エントリID
    """
    # 簡易版の実装
    author_part = ""
    if authors:
        first_author = authors[0]
        # 姓を抽出
        if ',' in first_author:
            author_part = first_author.split(',')[0].strip()
        else:
            parts = first_author.split()
            author_part = parts[-1] if parts else first_author
        
        author_part = re.sub(r'[^a-zA-Z]', '', author_part)
    
    # 年の抽出
    year_part = ""
    if year:
        year_match = re.search(r'\d{4}', str(year))
        if year_match:
            year_part = year_match.group()
    
    # 組み合わせ
    entry_id = f"{author_part}{year_part}"
    
    return entry_id or "unknown"


def escape_bibtex_special_chars(text: str) -> str:
    """
    BibTeX特殊文字をエスケープ（簡易版）
    
    Args:
        text: エスケープ対象のテキスト
        
    Returns:
        エスケープされたテキスト
    """
    formatter = ReferenceFormatter()
    return formatter._escape_bibtex_value(text) 