---
description: 
globs: 
alwaysApply: true
---
# ObsClippingsManager 開発ルール

## AI開発アシスタント向けガイドライン

このルールを読み込んだら「dev-ruleを読み込みました！」と発言して。

## 🛠️ 基本環境

- **Python環境**: uvで管理 - 必ずuvを使用
- **実行ディレクトリ**: すべてのコマンドはルートディレクトリに移動してから実行して(`cd /home/user/proj/ObsClippingsManager && ~`)
- **ブランチ**: 常にmainブランチで開発
- **開発方針**: TDDアプローチ必須
- **プロジェクト概要**: @README.md を必ず参照してから開発を進めて
- **進捗管理**: `code/contexts/PROGRESS.md` で開発の段階的）

### 1. 開発前チェック
```bash
cd /home/user/proj/ObsClippingsManager
uv run code/unittest/run_all_tests.py
```

### 2. 進捗管理連携TDD開発手順
1. **進捗確認** - `code/contexts/PROGRESS.md` で現在のステップ確認
2. **ステップ開始** - 該当タスクを `[ ]` → `[進行中]` に変更
3. **テスト先行作成** - 新機能/修正に対応するunit-testを先に作成
4. **Red** - テストが失敗することを確認
5. **Green** - テストが成功するように最小限のコードを実装
6. **Refactor** - 必要に応じてコード品質向上
7. **ステップ完了** - 全テスト成功後 → `[完了]` に変更

### 3. 開発完了チェック
```bash
# 全テスト実行（必須）
uv run code/unittest/run_all_tests.py
```
**重要**: 全テストが成功してから次に進む

### 4. 進捗同期とGit操作
```bash
# PROGRESS.md更新確認（ステップを[完了]に変更済みか確認）
git add -A
git commit -m "[種類]: 変更内容（50文字以内）"
git push
```

### 5. 仕様書同期
- 実装と仕様書(`code/contexts/*.md`, `README.md`)の整合性確認
- 不整合があれば仕様書を更新 (@specification-rule.md 参照)

## 📝 進捗管理ルール

### ステップ実行原則
- **必須**: 各ステップ完了時に `PROGRESS.md` 更新
- **テスト確認**: ステップ完了前に全テスト実行
- **Git同期**: テスト成功確認後に必ずcommit & push
- **問題対応**: 問題発生時は `[問題]` ステータスで記録

### ステータス管理
- `[ ]`: 未着手
- `[進行中]`: 作業中
- `[完了]`: 完了・テスト成功・git push済み
- `[問題]`: 問題発生・要対応
- `[スキップ]`: 当該フェーズでは不要

### 新機能開発時の進捗管理
1. `PROGRESS.md` に新機能のステップを追加
2. 段階的に実装（通常3-5個のサブステップに分割）
3. 各ステップで上記フローを実行
4. 完了後に次期開発計画を更新

## 📝 コミットメッセージ

### 形式
```
[種類]: 変更内容の簡潔な説明（50文字以内）
```

### 種類
- `feat`: 新機能追加
- `fix`: バグ修正
- `docs`: ドキュメント更新
- `test`: テスト追加・修正
- `refactor`: リファクタリング
- `style`: コードフォーマット
- `chore`: その他
- `progress`: 進捗管理ファイル更新

## ⚠️ 重要ルール

### 品質保証
- **テスト失敗時**: 必ず原因特定して修正してから進む
- **リグレッション防止**: 既存テストが失敗した場合は実装見直し
- **Python 3.x互換性**: `from e` 構文NG、`__cause__` 使用
- **進捗記録**: ステップ完了を忘れずに `PROGRESS.md` に反映

### edit_file効果的利用
大規模ファイル（300-400行超）や複雑な変更で失敗を防ぐための指針：

1. **スコープ限定**: 「関数`X`を修正」「クラス`Y`を変更」など具体的に指定
2. **変更量削減**: 複数変更は関連性の高い1-2個ずつ分割実行
3. **適切なコンテキスト**: 変更箇所特定に必要な最小限の周辺コード含める
4. **ファイル分割**: 可能であれば機能的により小さなファイルに分割

### エラー対応
```bash
# 構文チェック
uv run python -m py_compile [ファイル]

# 個別テスト実行
uv run python -m unittest [テストクラス]

# 進捗状況確認
cat code/contexts/PROGRESS.md
```

### 例外処理
- ObsClippingsManagerError基底クラス使用
- IntegratedLoggerで適切なログレベル設定

---

**重要**: TDD必須、進捗管理連携、テスト100%成功維持

